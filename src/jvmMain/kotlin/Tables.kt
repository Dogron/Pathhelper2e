val perceptionTable: Map<Int, Map<StatTier, Int>> = """–1 +9 +8 +5 +2 +0
0 +10 +9 +6 +3 +1
1 +11 +10 +7 +4 +2
2 +12 +11 +8 +5 +3
3 +14 +12 +9 +6 +4
4 +15 +14 +11 +8 +6
5 +17 +15 +12 +9 +7
6 +18 +17 +14 +11 +8
7 +20 +18 +15 +12 +10
8 +21 +19 +16 +13 +11
9 +23 +21 +18 +15 +12
10 +24 +22 +19 +16 +14
11 +26 +24 +21 +18 +15
12 +27 +25 +22 +19 +16
13 +29 +26 +23 +20 +18
14 +30 +28 +25 +22 +19
15 +32 +29 +26 +23 +20
16 +33 +30 +28 +25 +22
17 +35 +32 +29 +26 +23
18 +36 +33 +30 +27 +24
19 +38 +35 +32 +29 +26
20 +39 +36 +33 +30 +27
21 +41 +38 +35 +32 +28
22 +43 +39 +36 +33 +30
23 +44 +40 +37 +34 +31
24 +46 +42 +38 +36 +32
""".toStatisticsTable(
    tiers = StatTier.values().toList()
) { it.toInt() }

private fun <T> String.toStatisticsTable(tiers: List<StatTier>, parser: (String) -> T) =
    lines().associate { line ->
        val values = line.split(" ")
        values[0].toInt() to tiers.mapIndexed { index, it ->
            it to parser(values[index + 1])
        }.toMap()
    }

val hitPointsTable = """–1 9 8–7 6–5
0 20–17 16–14 13–11
1 26–24 21–19 16–14
2 40–36 32–28 25–21
3 59–53 48–42 37–31
4 78–72 63–57 48–42
5 97–91 78–72 59–53
6 123–115 99–91 75–67
7 148–140 119–111 90–82
8 173–165 139–131 105–97
9 198–190 159–151 120–112
10 223–215 179–171 135–127
11 248–240 199–191 150–142
12 273–265 219–211 165–157
13 298–290 239–231 180–172
14 323–315 259–251 195–187
15 348–340 279–271 210–202
16 373–365 299–291 225–217
17 398–390 319–311 240–232
18 423–415 339–331 255–247
19 448–440 359–351 270–262
20 473–465 379–371 285–277
21 505–495 405–395 305–295
22 544–532 436–424 329–317
23 581–569 466–454 351–339
24 633–617 508–492 383–367  
""".toStatisticsTable(listOf(StatTier.High, StatTier.Moderate, StatTier.Low)) {
    val (low, high) = it.split("-").map { it.toInt() }
    low..high
}